* A Description of the Algorithm 


The algorithm should generate an "answer set" that is a set of terms that  have a match under the given relation.





#+begin_src ocaml 
type answerSet = { relation : term -> term -> bool
                 , terms:     [term] }

#+end_src



A term 't' may be added as part of the answer set when it meets the following criteria.

+ answerSet


* Notes from Pfenning [[https://www.cs.cmu.edu/~fp/courses/lp/lectures/26-datalog.pdf][Datalog Implementation]]

** Represent every predicate as a boolean function
This is done in two steps: based on the type of
the argument, we find out how many distinct constants can appear in this
argument (say n) and then represent them with log2(n) bits. The output of
the function is always 1 or 0, depending on whether the predicate is true
(1) or false (0). 



live₀(x₁,k₂) ^ succ(k₂,k₃)


*** live[0](x₁,k₂)
    
x₁ — - 0 — — - - - - - - - ->  0
   |
   ——- 1 ——— > k₂ – - - -0 ->  1
                  |
                  ———————1——-> 0
 

**** live[0]₀ ≡  live[0](x1,0)  , live[0]₁ ≡  live[0](x1,1)   


k₂ – - - -0 ->  live[0]₀
   |             
   ———————1——-> live[0]₁

    


                  
*** succ(k₂,k₃)



k₂ ———— 1 ——— k₃ —-—- 1 —- > 0
   |              
   |  - - - 0 -  k₃ - - 0 - -> 0
                  
                  ——- 1——-—> 1


****  S₀ ≡ succ(0,k₃) , S₁ ≡ succ(0,k₃)


#+LATEX_HEADER: \usepackage{tikz}

First execute the second code block, to define the convenience macro
and to set the required new variables in ob-latex.el.  Then export to
HTML and to pdf to see the tree exported as an SVG image and as
embedded tikz respectively.

* Tikz test





  Here's a tree, exported to both html and pdf.

#+header: :file (by-backend (html "tree.svg") (t 'nil))
#+header: :imagemagick
#+header: :results (by-backend (pdf "latex") (t "raw"))
#+begin_src latex
  \usetikzlibrary{trees}
  \begin{tikzpicture}
    \node [circle, draw, fill=red!20] at (0,0) {1}
    child { node [circle, draw, fill=blue!30] {2}
      child { node [circle, draw, fill=green!30] {3} }
      child { node [circle, draw, fill=yellow!30] {4} }};
  \end{tikzpicture}
#+end_src

